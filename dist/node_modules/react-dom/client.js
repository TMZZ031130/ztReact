(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

	const FunctionComponent = 0;
	const HostRoot = 3;
	//<div>
	const HostComponent = 5;
	//<div>中的文本
	const HostText = 6;

	const NoFlags = 0b0000001;
	const Placement = 0b0000010;
	const Update = 0b0000100;
	const ChildDeletion = 0b0001000;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    type;
	    tag;
	    pendingProps; //正在被处理的新props
	    key;
	    ref;
	    stateNode;
	    return;
	    sibling;
	    child;
	    index;
	    memorizedProps; //最新的Props
	    memorizedState; //最新的State
	    alternate; //两棵树的对应连接
	    flags; //操作类型
	    subtreeFlags;
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        this.tag = tag;
	        this.key = key;
	        //HostComponent <div>的divDOM
	        this.stateNode = null;
	        //FunctionComponent本身
	        this.type = null;
	        //指向父fiberNode
	        this.return = null;
	        //指向右边兄弟fiberNode
	        this.sibling = null;
	        //指向子fiberNode
	        this.child = null;
	        //代表了同级fiberNode的编号
	        this.index = 0;
	        this.ref = null;
	        //作为工作单元
	        this.pendingProps = pendingProps; //操作前
	        this.memorizedProps = null; //操作后的props
	        this.updateQueue = null; //更新队列
	        this.memorizedState = null;
	        this.alternate = null; //指向另一棵树的节点
	        this.flags = NoFlags; //副作用(标记)
	        this.subtreeFlags = NoFlags;
	    }
	}
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        console.warn('this=========>', this);
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    console.warn('current', current);
	    console.warn('首次创建wip', wip);
	    if (wip === null) {
	        //mount首屏渲染
	        console.warn('mount开始', wip);
	        console.warn('三个数据', current.tag, pendingProps, current.key);
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        console.warn('mount开始', wip);
	        wip.type = current.type;
	        console.warn('mount开始', wip);
	        wip.stateNode = current.stateNode;
	        console.warn('传入数据', wip);
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        //update
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	    }
	    wip.type = current.type;
	    // wip.flags = current.flags;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    console.warn('获得child后', wip);
	    wip.memorizedProps = current.memorizedProps;
	    wip.memorizedState = current.memorizedState;
	    console.warn('获得child后', wip);
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    console.warn('XXXXXXXXXXXXXX', element, type, props, key);
	    if (typeof type === 'string') {
	        //<div> --> 'div' --> type: 'div
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未实现的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    console.log('OOOOOOO', fiber);
	    fiber.type = type;
	    return fiber;
	}

	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	    console.warn('将update塞入', update, updateQueue.shared.pending);
	};
	//用于计算新的状态
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memorizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        console.warn('action!!!!!!!!!!', baseState);
	        console.warn('action!!!!!!!!!!', action);
	        if (action instanceof Function) {
	            console.warn('进1');
	            result.memorizedState = action(baseState);
	        }
	        else {
	            console.warn('进2');
	            result.memorizedState = action;
	        }
	    }
	    console.warn('result!!!!!!!!!!', result);
	    return result;
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	function ChildReconciler(shouldTrackEffects) {
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        console.warn('第一次ChildReconciler', fiber);
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffects && fiber.alternate === null) {
	            console.warn('//首屏渲染且需要副作用（也就是离屏DOM树构建完后的一次性操作）', fiber.flags);
	            fiber.flags |= Placement;
	            console.warn('//首屏渲染且需要副作用（也就是离屏DOM树构建完后的一次性操作）', fiber.flags);
	        } //首屏渲染且需要副作用（也就是离屏DOM树构建完后的一次性操作）
	        return fiber;
	    }
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        //TODO 多节点情况 ul>>li*3
	        //HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	const beginWork = (wip) => {
	    console.warn('进入beginwork', wip);
	    //比较，返回子fiberNode
	    switch (wip.tag) {
	        case HostRoot:
	            console.warn('进入beginwork', wip);
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        default:
	            {
	                console.log('beginwork未实现的类型');
	            }
	            break;
	    }
	    return null;
	};
	function updateHostRoot(wip) {
	    console.warn('问题！！！！！！！！！', wip.memorizedState);
	    const baseState = wip.memorizedState;
	    const updateQueue = wip.updateQueue;
	    console.warn('updateHostRoot中的baseState', wip.memorizedState, wip);
	    console.warn('updateHostRoot中的updateQuenen', updateQueue.shared.pending);
	    const pending = updateQueue.shared.pending; //参与计算的update
	    updateQueue.shared.pending = null;
	    const { memorizedState } = processUpdateQueue(baseState, pending);
	    console.warn('返回的resultMMMMMMMMM', memorizedState);
	    wip.memorizedState = memorizedState;
	    const nextChildren = wip.memorizedState;
	    reconcileChildren(wip, nextChildren);
	    console.warn('准备返回子fiber', nextChildren, wip.child);
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    console.warn('GGGGGGGGGGGG', nextChildren);
	    reconcileChildren(wip, nextChildren);
	    console.warn('GGGGGGGGGGGG', wip.child);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    if (current !== null) {
	        //update
	        console.warn('进3', current, children);
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        //mount
	        console.warn('进4');
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	// export const createInstance = (type: string, props: any): Instance
	const createInstance = (type) => {
	    //TODO 处理props
	    const element = document.createElement(type);
	    console.log('UUUUDSHJDSJJDNNS', element);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    console.warn('执行appendChild', parent, child);
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	let nextEffect = null; //指向下一个effect
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    console.warn('commitMutationEffects内部的finishedWork', finishedWork);
	    while (nextEffect !== null) {
	        //向下遍历
	        const child = nextEffect.child;
	        console.warn('获得child', child);
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	            console.warn('nextEffect变为child', nextEffect);
	        }
	        else {
	            //向上遍历 DFS
	            up: while (nextEffect !== null) {
	                console.warn('进入up', nextEffect);
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    //执行并清除Placement
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement;
	    }
	    //flags Update
	    //flags ChildDeletion
	};
	const commitPlacement = (finishedWork) => {
	    //finishWork -- DOM
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    //parent DOM
	    const hostParent = getHostParent(finishedWork);
	    //finishedWork -- DOM append parent DOM
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        //HostComponent HostRoot
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            console.warn('返回值：', parent.stateNode.container);
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	        console.warn('parent:', parent);
	    }
	    {
	        console.warn('未找到host parent');
	    }
	    return null;
	}
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    console.warn('执行appendPlacement', finishedWork, hostParent);
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) ;
	            else {
	                //1.构建DOM树
	                // const instance = createInstance(wip.type, newProps);
	                const instance = createInstance(wip.type);
	                //2.将DOM插入到DOM树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) ;
	            else {
	                //1.构建DOM树
	                const instance = createTextInstance(newProps.content);
	                //2.将DOM插入到DOM树中
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的completeWork情况', wip);
	            }
	    }
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let workInProgress = null;
	function prepareFreshStack(root) {
	    console.warn('prepare中的root', root);
	    console.warn('root.current', workInProgress, root.current);
	    workInProgress = createWorkInProgress(root.current, {});
	    console.warn('prepare中的wip', workInProgress, root.current);
	}
	function scheduleUpdateOnFiber(fiber) {
	    //TODO调度方法
	    //fiberRootNode
	    const root = markUpdateFromFiberToRoot(fiber);
	    console.warn('schedule中的root', root);
	    renderRoot(root);
	}
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        console.warn('-----+++++++++++++++++++++++>', node.stateNode);
	        return node.stateNode;
	    }
	    return null;
	}
	const renderRoot = (root) => {
	    //初始化
	    console.warn('初始化前的root', root);
	    prepareFreshStack(root);
	    console.warn('初始化后的root', root, workInProgress);
	    do {
	        try {
	            console.warn('循环开始', workInProgress);
	            workLoop();
	            console.warn('循环结束', workInProgress);
	            break;
	        }
	        catch (e) {
	            {
	                console.warn('workLoop错误', e);
	                workInProgress = null;
	            }
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    console.warn(finishedWork, root.finishedWork);
	    commitRoot(root);
	};
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    //重置
	    root.finishedWork = null;
	    console.warn('重置', root.finishedWork);
	    //判断是否存在3个子阶段需要执行的操作
	    //root flags root subtreeFlags
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        //beforeMutation
	        //Mutation
	        console.warn('执行commitMutationEffects', finishedWork);
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	        console.warn('root.current后的finishedWork和root.current', finishedWork);
	        //layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	const workLoop = () => {
	    if (workInProgress !== null) {
	        console.warn('workLoop中的wip', workInProgress);
	        performUnitOfWork(workInProgress);
	    }
	};
	function performUnitOfWork(fiber) {
	    console.warn('这里的fiber++SHHSHSH', fiber);
	    const next = beginWork(fiber);
	    console.warn('next:', fiber, next);
	    fiber.memorizedProps = fiber.pendingProps;
	    console.warn('memo:', fiber.memorizedProps, fiber.pendingProps);
	    if (next === null) {
	        completeUntiOfWork(fiber);
	    }
	    else {
	        console.warn('进入下一个子节点');
	        workInProgress = next;
	    }
	}
	function completeUntiOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}

	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    console.warn('打印这个hostRootFiber', hostRootFiber);
	    const root = new FiberRootNode(container, hostRootFiber);
	    console.warn('根结点以创建并返回', root);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    console.warn('根结点以创建并返回', root);
	    return root;
	}
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    console.warn('刚创建的hostRootFiber', hostRootFiber);
	    const update = createUpdate(element);
	    console.warn('update创建', hostRootFiber.updateQueue, update);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    // hostRootFiber.updateQueue.shared.pending = update;
	    console.warn('enque后的hostRootFiber.updateQueue', hostRootFiber.updateQueue);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	function createRoot(container) {
	    const root = createContainer(container);
	    console.warn('--------->root', root);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
